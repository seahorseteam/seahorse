/*     * Copyright (c) 2014 Samsung Electronics Co., Ltd.    * All rights reserved.    *    * Redistribution and use in source and binary forms, with or without    * modification, are permitted provided that the following conditions are    * met:    *    *     * Redistributions of source code must retain the above copyright    *        notice, this list of conditions and the following disclaimer.   *     * Redistributions in binary form must reproduce the above   *       copyright notice, this list of conditions and the following disclaimer   *       in the documentation and/or other materials provided with the   *       distribution.   *     * Neither the name of Samsung Electronics Co., Ltd. nor the names of its   *       contributors may be used to endorse or promote products derived from   *       this software without specific prior written permission.   *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS   * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR   * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT   * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,   * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY   * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package com.samsung.android.example.helloaccessoryprovider.service;import java.io.IOException;import java.util.ArrayList;import android.content.Intent;import android.os.Binder;import android.os.IBinder;import android.util.Log;import com.samsung.android.sdk.SsdkUnsupportedException;import com.samsung.android.sdk.accessory.SA;import com.samsung.android.sdk.accessory.SAAgent;import com.samsung.android.sdk.accessory.SAPeerAgent;import com.samsung.android.sdk.accessory.SASocket;public class HelloAccessoryProviderService extends SAAgent {	public static final String TAG = "SeaHorseGear2";	public static final int SERVICE_CONNECTION_RESULT_OK = 0;	public static final int HELLOACCESSORY_CHANNEL_ID = 104;	private final IBinder mBinder = new LocalBinder();	private static HelloAccessoryProviderConnection myConnection;	private static ArrayList<GearMsgReceiveListener> gearMsgListenerList;	private static String word = "Seahorse";// default	private static String mean = "해마"; // default	public HelloAccessoryProviderService() {		super(TAG, HelloAccessoryProviderConnection.class);		if (gearMsgListenerList != null) {			gearMsgListenerList = new ArrayList<GearMsgReceiveListener>();		}	}	/*****	 * 연결된 gear2 어플리케이션에 메시지를 보냄.	 * 	 * @param str	 *            -Gear2에 보낼 메시지.	 * @throws NullPointerException	 *             -발생한 경우 Gear2와 연결이 제대로 되어있지 않거나 연결할 앱이 없는 경우.	 */	public static void sendMessage(String str) throws NullPointerException {		try {			myConnection.send(HELLOACCESSORY_CHANNEL_ID, str.getBytes());		} catch (IOException e) {			e.printStackTrace();		} catch (NullPointerException e) {			throw new NullPointerException("Socket disconnect.");		}	}	/**	 * Gear 앱에서 전달한 메시지를 받아서 반환한다.	 * 	 * @param listener	 *            -전달된 메시지를 받을 객체.	 */	public static void addReceiveGearMsgListener(GearMsgReceiveListener listener) {		if (listener != null) {			gearMsgListenerList.add(listener);		}	}	/***	 * Gear 앱에 보낼 단어와 뜻 문자열을 받는다.	 * 	 * @param word	 *            -Gear에 보낼 단어 문자열.	 * @param mean	 *            -Gear에 보낼 단어의 뜻 문자열.	 */	public static void pushWords(String word, String mean) {		if (word != null && mean != null) {			HelloAccessoryProviderService.word = word;			HelloAccessoryProviderService.mean = mean;		}	}	public class HelloAccessoryProviderConnection extends SASocket {		public HelloAccessoryProviderConnection() {			super(HelloAccessoryProviderConnection.class.getName());		}		@Override		public void onError(int channelId, String errorString, int error) {		}		@Override		public void onReceive(int channelId, byte[] data) {			// receive msg to gear			for (GearMsgReceiveListener listener : gearMsgListenerList) {				listener.receivedGearMsg(data.toString());			}		}		@Override		protected void onServiceConnectionLost(int errorCode) {		}	}	@Override	public void onCreate() {		super.onCreate();		SA mAccessory = new SA();		try {			mAccessory.initialize(this);		} catch (SsdkUnsupportedException e) {			// Error Handling		} catch (Exception e1) {			e1.printStackTrace();			/*			 * Your application can not use Samsung Accessory SDK. You			 * application should work smoothly without using this SDK, or you			 * may want to notify user and close your app gracefully (release			 * resources, stop Service threads, close UI thread, etc.)			 */			stopSelf();		}	}	@Override	protected void onServiceConnectionRequested(SAPeerAgent peerAgent) {		acceptServiceConnectionRequest(peerAgent);	}	@Override	protected void onFindPeerAgentResponse(SAPeerAgent arg0, int arg1) {	}	@Override	protected void onServiceConnectionResponse(SASocket thisConnection,			int result) {		switch (result) {		case CONNECTION_SUCCESS:			/*			 * accessoryservices.xml 에서는 ANY로 여러개를 받을 수 있게 해놓았지만 이 어플은 실제로 1개의			 * 앱과 통신할 것이기 때문에 하나만 받도록 하였다. 원래 샘플 소스를 보면 ANY에 맞게 HashMap으로 관리하고			 * 있다. 속성 건드리기 무서워 그냥 놔뒀을 뿐이다.			 */			if (thisConnection != null) {				myConnection = (HelloAccessoryProviderConnection) thisConnection;				sendMessage(word + "//" + mean);			}			break;		case CONNECTION_ALREADY_EXIST:			Log.e(TAG, "onServiceConnectionResponse, CONNECTION_ALREADY_EXIST");			break;		default:			Log.e(TAG, "onServiceConnectionResponse result error =" + result);			break;		}	}	public class LocalBinder extends Binder {		public HelloAccessoryProviderService getService() {			return HelloAccessoryProviderService.this;		}	}	@Override	public IBinder onBind(Intent arg0) {		return mBinder;	}}